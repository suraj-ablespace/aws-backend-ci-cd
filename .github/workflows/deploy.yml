name: Deploy to App Runner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      APP_RUNNER_SERVICE_NAME: ${{ vars.APP_RUNNER_SERVICE_NAME }}
      APP_RUNNER_ECR_ACCESS_ROLE_ARN: ${{ vars.APP_RUNNER_ECR_ACCESS_ROLE_ARN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::604100153348:role/S-Demo-GitHubActions-AppRunnerRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image
        run: |
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy to App Runner (create if missing)
        run: |
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn" \
            --output text --region $AWS_REGION)

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "None" ]; then
            echo "Service not found, creating new App Runner service..."
            aws apprunner create-service \
              --service-name $APP_RUNNER_SERVICE_NAME \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR},AuthenticationConfiguration={AccessRoleArn=$APP_RUNNER_ECR_ACCESS_ROLE_ARN}" \
              --region $AWS_REGION
          else
            echo "Service found, updating existing App Runner service..."
            aws apprunner update-service \
              --service-arn $SERVICE_ARN \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR},AuthenticationConfiguration={AccessRoleArn=$APP_RUNNER_ECR_ACCESS_ROLE_ARN}" \
              --region $AWS_REGION
          fi

      - name: Wait for App Runner service to be RUNNING
        run: |
          SERVICE_ARN=$(aws apprunner list-services \
            --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn" \
            --output text --region $AWS_REGION)

          echo "Waiting for App Runner service to be RUNNING..."
          aws apprunner wait service-running \
            --service-arn $SERVICE_ARN \
            --region $AWS_REGION

          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn $SERVICE_ARN \
            --query "Service.ServiceUrl" \
            --output text --region $AWS_REGION)

          echo "✅ App Runner service is live at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Health check app endpoint
        run: |
          echo "Running health check..."
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL/health || true)
            if [ "$STATUS" == "200" ]; then
              echo "✅ Health check passed!"
              exit 0
            else
              echo "Health check attempt $i failed (status: $STATUS), retrying..."
              sleep 10
            fi
          done
          echo "❌ Health check failed after multiple attempts"
          exit 1
