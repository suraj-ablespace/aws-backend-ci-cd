name: Deploy to App Runner

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: main
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      APP_RUNNER_SERVICE_NAME: ${{ vars.APP_RUNNER_SERVICE_NAME }}
      APP_RUNNER_ECR_ACCESS_ROLE_ARN: ${{ vars.APP_RUNNER_ECR_ACCESS_ROLE_ARN }}
      DEPLOY_MAX_ATTEMPTS: 90 # 15 minutes max (90×10s)

    outputs:
      service_url: ${{ steps.get-url.outputs.service_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_GITHUB_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push image
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --push -t $IMAGE_URI .
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy to App Runner (create if missing)
        run: |
          SERVICE_ARN=$(aws apprunner list-services --no-paginate \
            --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn | [0]" \
            --output text --region $AWS_REGION)

          if [ -z "$SERVICE_ARN" ] || [ "$SERVICE_ARN" == "None" ]; then
            echo "Service not found, creating new App Runner service..."
            aws apprunner create-service \
              --service-name $APP_RUNNER_SERVICE_NAME \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR},AuthenticationConfiguration={AccessRoleArn=$APP_RUNNER_ECR_ACCESS_ROLE_ARN}" \
              --region $AWS_REGION
          else
            echo "Service found, updating existing App Runner service..."
            aws apprunner update-service \
              --service-arn $SERVICE_ARN \
              --source-configuration "ImageRepository={ImageIdentifier=$IMAGE_URI,ImageRepositoryType=ECR},AuthenticationConfiguration={AccessRoleArn=$APP_RUNNER_ECR_ACCESS_ROLE_ARN}" \
              --region $AWS_REGION
          fi

      - name: Wait for App Runner deployment to complete
        run: |
          SERVICE_ARN=$(aws apprunner list-services --no-paginate \
            --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn | [0]" \
            --output text --region $AWS_REGION)

          echo "Waiting for deployment to complete... ⏳"
          for i in $(seq 1 $DEPLOY_MAX_ATTEMPTS); do
            STATUS=$(aws apprunner describe-service \
              --service-arn $SERVICE_ARN \
              --query "Service.Status" \
              --output text --region $AWS_REGION)
            echo "Attempt $i: Current status → $STATUS"

            if [ "$STATUS" == "RUNNING" ]; then
              echo "✅ Deployment successful!"
              break
            elif [[ "$STATUS" == *"FAILED"* ]]; then
              echo "❌ Deployment failed with status: $STATUS"
              exit 1
            fi
            sleep 10
          done

          if [ "$STATUS" != "RUNNING" ]; then
            echo "❌ Timed out after $DEPLOY_MAX_ATTEMPTS attempts."
            exit 1
          fi

      - name: Get App Runner URL
        id: get-url
        run: |
          SERVICE_ARN=$(aws apprunner list-services --no-paginate \
            --query "ServiceSummaryList[?ServiceName=='$APP_RUNNER_SERVICE_NAME'].ServiceArn | [0]" \
            --output text --region $AWS_REGION)
          SERVICE_URL=$(aws apprunner describe-service \
            --service-arn $SERVICE_ARN \
            --query "Service.ServiceUrl" \
            --output text --region $AWS_REGION)
          echo "✅ App Runner service is live at: $SERVICE_URL"
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT